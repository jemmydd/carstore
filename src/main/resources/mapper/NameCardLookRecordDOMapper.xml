<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lym.mechanical.dao.mapper.NameCardLookRecordDOMapper">
  <resultMap id="BaseResultMap" type="com.lym.mechanical.bean.entity.NameCardLookRecordDO">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="card_id" jdbcType="INTEGER" property="cardId" />
    <result column="has_dial" jdbcType="BIT" property="hasDial" />
  </resultMap>
  <sql id="Base_Column_List">
    id, create_time, update_time, user_id, card_id, has_dial
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from name_card_look_record
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from name_card_look_record
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.lym.mechanical.bean.entity.NameCardLookRecordDO">
    insert into name_card_look_record (id, create_time, update_time, 
      user_id, card_id, has_dial
      )
    values (#{id,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{userId,jdbcType=INTEGER}, #{cardId,jdbcType=INTEGER}, #{hasDial,jdbcType=BIT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.lym.mechanical.bean.entity.NameCardLookRecordDO">
    insert into name_card_look_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="cardId != null">
        card_id,
      </if>
      <if test="hasDial != null">
        has_dial,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="cardId != null">
        #{cardId,jdbcType=INTEGER},
      </if>
      <if test="hasDial != null">
        #{hasDial,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.lym.mechanical.bean.entity.NameCardLookRecordDO">
    update name_card_look_record
    <set>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="cardId != null">
        card_id = #{cardId,jdbcType=INTEGER},
      </if>
      <if test="hasDial != null">
        has_dial = #{hasDial,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lym.mechanical.bean.entity.NameCardLookRecordDO">
    update name_card_look_record
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      user_id = #{userId,jdbcType=INTEGER},
      card_id = #{cardId,jdbcType=INTEGER},
      has_dial = #{hasDial,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectLookRecordByUserId" resultType="com.lym.mechanical.bean.dto.message.LookUserDTO">
    SELECT
    user_id AS userId,
    biz_id AS bizId,
    `date` AS `date`,
    biz_type AS bizType
    FROM (
    SELECT
    user_id AS user_id,
    publish_id AS biz_id,
    create_time AS `date`,
    'PUBLISH_LOOK' AS biz_type
    FROM publish_look_record
    WHERE publish_id IN (SELECT id FROM publish WHERE car_user_id = #{userId})
    UNION ALL
    SELECT
    car_user_id AS user_id,
    publish_id AS biz_id,
    create_time AS `date`,
    'PUBLISH_COLLECT' AS biz_type
    FROM car_user_collection
    WHERE publish_id IN (SELECT id FROM publish WHERE car_user_id = #{userId})
    UNION ALL
    SELECT
    user_id AS user_id,
    card_id AS biz_id,
    create_time AS `date`,
    'CARD' AS biz_type
    FROM name_card_look_record
    WHERE card_id IN (SELECT id FROM name_card WHERE user_id = #{userId})) a ORDER BY a.`date` desc
  </select>
  <select id="selectByCardIdAndDate" resultMap="BaseResultMap">
    select * from name_card_look_record
    where card_id = #{cardId}
    <if test="date != null and date != ''">
      and date_format(create_time, '%Y-%m-%d') = #{date}
    </if>
    order by create_time desc
  </select>
</mapper>