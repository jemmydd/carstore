<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lym.mechanical.dao.mapper.PublishLookRecordDOMapper">
  <resultMap id="BaseResultMap" type="com.lym.mechanical.bean.entity.PublishLookRecordDO">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="publish_id" jdbcType="INTEGER" property="publishId" />
    <result column="has_dial" jdbcType="BIT" property="hasDial" />
    <result column="has_collect" jdbcType="BIT" property="hasCollect" />
    <result column="look_time" jdbcType="INTEGER" property="lookTime" />
    <result column="car_user_id" jdbcType="INTEGER" property="carUserId" />
  </resultMap>
  <sql id="Base_Column_List">
    id, create_time, update_time, user_id, publish_id, has_dial, has_collect, look_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from publish_look_record
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from publish_look_record
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.lym.mechanical.bean.entity.PublishLookRecordDO">
    insert into publish_look_record (id, create_time, update_time, 
      user_id, publish_id, has_dial, 
      has_collect, look_time)
    values (#{id,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{userId,jdbcType=INTEGER}, #{publishId,jdbcType=INTEGER}, #{hasDial,jdbcType=BIT}, 
      #{hasCollect,jdbcType=BIT}, #{lookTime,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.lym.mechanical.bean.entity.PublishLookRecordDO">
    insert into publish_look_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="publishId != null">
        publish_id,
      </if>
      <if test="hasDial != null">
        has_dial,
      </if>
      <if test="hasCollect != null">
        has_collect,
      </if>
      <if test="lookTime != null">
        look_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="publishId != null">
        #{publishId,jdbcType=INTEGER},
      </if>
      <if test="hasDial != null">
        #{hasDial,jdbcType=BIT},
      </if>
      <if test="hasCollect != null">
        #{hasCollect,jdbcType=BIT},
      </if>
      <if test="lookTime != null">
        #{lookTime,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.lym.mechanical.bean.entity.PublishLookRecordDO">
    update publish_look_record
    <set>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="publishId != null">
        publish_id = #{publishId,jdbcType=INTEGER},
      </if>
      <if test="hasDial != null">
        has_dial = #{hasDial,jdbcType=BIT},
      </if>
      <if test="hasCollect != null">
        has_collect = #{hasCollect,jdbcType=BIT},
      </if>
      <if test="lookTime != null">
        look_time = #{lookTime,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lym.mechanical.bean.entity.PublishLookRecordDO">
    update publish_look_record
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      user_id = #{userId,jdbcType=INTEGER},
      publish_id = #{publishId,jdbcType=INTEGER},
      has_dial = #{hasDial,jdbcType=BIT},
      has_collect = #{hasCollect,jdbcType=BIT},
      look_time = #{lookTime,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectTodayGuest" resultType="Integer">
    SELECT DISTINCT * FROM(
    SELECT user_id FROM name_card_look_record WHERE card_id = (SELECT id FROM name_card WHERE user_id = #{userId}) AND DATE_FORMAT(create_time,'%Y%m%d') = DATE_FORMAT(NOW(),'%Y%m%d')
    UNION ALL
    SELECT user_id FROM publish_look_record WHERE publish_id in (SELECT id FROM publish WHERE car_user_id = #{userId}) AND DATE_FORMAT(create_time,'%Y%m%d') = DATE_FORMAT(NOW(),'%Y%m%d')
    ) a
  </select>
  <select id="selectTotalGuest" resultType="Integer">
    SELECT DISTINCT * FROM(
    SELECT user_id FROM name_card_look_record WHERE card_id = (SELECT id FROM name_card WHERE user_id = #{userId})
    UNION ALL
    SELECT user_id FROM publish_look_record WHERE publish_id in (SELECT id FROM publish WHERE car_user_id = #{userId})
    ) a
  </select>
  <select id="selectMyGuestList" resultType="com.lym.mechanical.bean.dto.my.MyGuestDO">
    SELECT user_id as userId,MAX(create_time) as createTime FROM(
        SELECT user_id,create_time FROM publish_look_record WHERE publish_id in (SELECT id FROM publish WHERE car_user_id = #{userId})
        <if test="type != null and type == 0">
          and DATE_FORMAT(create_time,'%Y%m%d') = DATE_FORMAT(NOW(),'%Y%m%d')
        </if>
        <if test="hasDial != null and hasDial == 1">
          and has_dial = 1
        </if>
        <if test="hasCollect != null and hasCollect == 1">
          and has_collect = 1
        </if>
        <if test="hasLook != null and hasLook == 0">
          UNION ALL
          SELECT user_id, create_time FROM name_card_look_record WHERE card_id = (SELECT id FROM name_card WHERE user_id = #{userId})
          <if test="type != null and type == 0">
            and DATE_FORMAT(create_time,'%Y%m%d') = DATE_FORMAT(NOW(),'%Y%m%d')
          </if>
          <if test="hasDial != null and hasDial == 1">
            and has_dial = 1
          </if>
        </if>
    ) a GROUP BY a.user_id
  </select>
  <select id="selectByUserIdAndPublishIdOrderByLookTime" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from publish_look_record
    <where>
      <if test="latentUserId != null">
        and user_id = #{latentUserId}
      </if>
      <if test="publishId != null">
        and publish_id = #{publishId}
      </if>
      <if test="userId != null">
        and publish_id in (select id from publish where car_user_id = #{userId})
      </if>
    </where>
    order by look_time desc
  </select>
  <select id="selectHistory" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from publish_look_record
    <where>
        <if test="publishId != null">
          and publish_id = #{publishId}
        </if>
        <if test="hasDial != null and hasDial == 1">
          and has_dial = #{hasDial}
        </if>
        <if test="hasCollect != null and hasCollect == 1">
          and has_collect = #{hasCollect}
        </if>
    </where>
    order by create_time desc
  </select>
  <select id="selectHistoryByUserId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from publish_look_record
    <where>
      <if test="latentUserId != null">
        and user_id = #{latentUserId}
      </if>
      <if test="hasDial != null and hasDial == 1">
        and has_dial = #{hasDial}
      </if>
      <if test="hasCollect != null and hasCollect == 1">
        and has_collect = #{hasCollect}
      </if>
      <if test="userId != null">
        and publish_id in (select id from publish where car_user_id = #{userId})
      </if>
    </where>
    order by create_time desc
  </select>
  <select id="selectBatchByPublishId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from publish_look_record
    where
    <if test="publishIds != null and publishIds.size > 0">
      publish_id in
      <foreach collection="publishIds" item="item" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test="publishIds == null or publishIds.size == 0">
      1 = 0
    </if>
  </select>
  <select id="selectUserLookByPublishId" resultType="com.lym.mechanical.bean.dto.admin.UserLookRecordDTO">
    select
    user_id as userId,
    max(create_time) as lastTime
    from publish_look_record
    where publish_id = #{publishId}
    group by user_id
    order by max(create_time) desc
  </select>
  <select id="selectBatchByCarUserId" resultMap="BaseResultMap">
    select publish_look_record.*, publish.car_user_id as car_user_id
    FROM publish_look_record JOIN publish ON publish_look_record.publish_id = publish.id
    <where>
      <if test="carUserIds != null and carUserIds.size > 0">
        publish.car_user_id IN
        <foreach collection="carUserIds" separator="," open="(" item="item" close=")">
          #{item}
        </foreach>
      </if>
      <if test="carUserIds == null or carUserIds.size == 0">
        1 = 0
      </if>
    </where>
  </select>
  <select id="selectLookCountByUserIdAndDateBetween" resultType="com.lym.mechanical.bean.dto.statistic.PublishLookDTO">
    SELECT publish_id as publishId, COUNT(DISTINCT(user_id)) as `count` FROM publish_look_record
    WHERE publish_id IN (SELECT id FROM publish WHERE car_user_id = #{userId})
    AND create_time &lt;= #{endDate} AND create_time &gt;= #{startDate}
    GROUP BY publish_id ORDER BY `count` DESC LIMIT 3;
  </select>
</mapper>